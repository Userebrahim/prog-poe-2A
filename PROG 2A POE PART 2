using System;
using System.Collections.Generic;
using System.Linq;

namespace RecipeApp
{
    class Ingredient
    {
        public string Name { get; set; }
        public double Quantity { get; set; }
        public string Unit { get; set; }
        public int Calories { get; set; }
        public string FoodGroup { get; set; }
    }

    class Recipe
    {
        public string Name { get; set; }
        public List<Ingredient> Ingredients { get; set; }
        public List<string> Steps { get; set; }

        public Recipe()
        {
            Ingredients = new List<Ingredient>();
            Steps = new List<string>();
        }

        public void EnterRecipe()
        {
            Console.Write("Enter the name of the recipe: ");
            Name = Console.ReadLine();

            Console.Write("Enter the number of ingredients: ");
            int ingredientCount = int.Parse(Console.ReadLine());

            for (int i = 0; i < ingredientCount; i++)
            {
                Ingredient ingredient = new Ingredient();

                Console.Write("Enter the name of ingredient {0}: ", i + 1);
                ingredient.Name = Console.ReadLine();

                Console.Write("Enter the quantity of ingredient {0}: ", i + 1);
                ingredient.Quantity = double.Parse(Console.ReadLine());

                Console.Write("Enter the unit of measurement for ingredient {0}: ", i + 1);
                ingredient.Unit = Console.ReadLine();

                Console.Write("Enter the number of calories for ingredient {0}: ", i + 1);
                ingredient.Calories = int.Parse(Console.ReadLine());

                Console.Write("Enter the food group for ingredient {0}: ", i + 1);
                ingredient.FoodGroup = Console.ReadLine();

                Ingredients.Add(ingredient);
            }

            Console.Write("Enter the number of steps: ");
            int stepCount = int.Parse(Console.ReadLine());

            for (int i = 0; i < stepCount; i++)
            {
                Console.Write("Enter step {0}: ", i + 1);
                Steps.Add(Console.ReadLine());
            }
        }

        public void DisplayRecipe()
        {
            Console.WriteLine("Recipe: {0}", Name);

            Console.WriteLine("Ingredients:");
            foreach (Ingredient ingredient in Ingredients)
            {
                Console.WriteLine("- {0} {1} of {2} ({3} calories, Food Group: {4})",
                    ingredient.Quantity, ingredient.Unit, ingredient.Name, ingredient.Calories, ingredient.FoodGroup);
            }

            Console.WriteLine("Steps:");
            for (int i = 0; i < Steps.Count; i++)
            {
                Console.WriteLine("{0}. {1}", i + 1, Steps[i]);
            }
        }

        public int CalculateTotalCalories()
        {
            int totalCalories = 0;

            foreach (Ingredient ingredient in Ingredients)
            {
                totalCalories += ingredient.Calories;
            }

            return totalCalories;
        }
    }

    class Part2Program
    {
        static List<Recipe> recipes = new List<Recipe>();

        static void Main(string[] args)
        {
            while (true)
            {
                Console.WriteLine("1. Enter Recipe");
                Console.WriteLine("2. Display Recipes");
                Console.WriteLine("3. Display Recipe Details");
                Console.WriteLine("4. Scale Recipe");
                Console.WriteLine("5. Reset Quantities");
                Console.WriteLine("6. Clear Recipe");
                Console.WriteLine("7. Exit");
                Console.Write("Enter your choice: ");
                int choice = int.Parse(Console.ReadLine());

                switch (choice)
                {
                    case 1:
                        EnterNewRecipe();
                        break;
                    case 2:
                        DisplayRecipes();
                        break;
                    case 3:
                        DisplayRecipeDetails();
                        break;
                    case 4:
                        ScaleRecipe();
                        break;
                    case 5:
                        ResetQuantities();
                        break;
                    case 6:
                        ClearRecipe();
                        break;
                    case 7:
                        Environment.Exit(0);
                        break;
                    default:
                        Console.WriteLine("Invalid choice. Please try again.");
                        break;
                }
            }
        }

        static void EnterNewRecipe()
        {
            Recipe recipe = new Recipe();
            recipe.EnterRecipe();
            recipes.Add(recipe);
            Console.WriteLine("Recipe entered successfully.");
        }

        static void DisplayRecipes()
        {
            if (recipes.Count == 0)
            {
                Console.WriteLine("No recipes found.");
                return;
            }

            Console.WriteLine("Recipes:");
            List<string> recipeNames = recipes.Select(r => r.Name).ToList();
            recipeNames.Sort();

            foreach (string name in recipeNames)
            {
                Console.WriteLine("- {0}", name);
            }
        }

        static void DisplayRecipeDetails()
        {
            if (recipes.Count == 0)
            {
                Console.WriteLine("No recipes found.");
                return;
            }

            Console.WriteLine("Enter the name of the recipe to display: ");
            string recipeName = Console.ReadLine();

            Recipe recipe = recipes.FirstOrDefault(r => r.Name == recipeName);

            if (recipe != null)
            {
                recipe.DisplayRecipe();
                int totalCalories = recipe.CalculateTotalCalories();
                Console.WriteLine("Total Calories: {0}", totalCalories);

                if (totalCalories > 300)
                {
                    Console.ForegroundColor = ConsoleColor.Red;

                    Console.WriteLine("Warning: This recipe exceeds 300 calories!");
                    Console.ResetColor();
                }
            }
            else
            {
                Console.WriteLine("Recipe not found.");
            }
        }

        static void ScaleRecipe()
        {
            if (recipes.Count == 0)
            {
                Console.WriteLine("No recipes found.");
                return;
            }

            Console.WriteLine("Enter the name of the recipe to scale: ");
            string recipeName = Console.ReadLine();

            Recipe recipe = recipes.FirstOrDefault(r => r.Name == recipeName);

            if (recipe != null)
            {
                Console.WriteLine("Enter the scale factor: ");
                double factor = double.Parse(Console.ReadLine());

                foreach (Ingredient ingredient in recipe.Ingredients)
                {
                    ingredient.Quantity *= factor;
                }

                Console.WriteLine("Recipe scaled successfully.");
            }
            else
            {
                Console.WriteLine("Recipe not found.");
            }
        }

        static void ResetQuantities()
        {
            if (recipes.Count == 0)
            {
                Console.WriteLine("No recipes found.");
                return;
            }

            Console.WriteLine("Enter the name of the recipe to reset quantities: ");
            string recipeName = Console.ReadLine();

            Recipe recipe = recipes.FirstOrDefault(r => r.Name == recipeName);

            if (recipe != null)
            {
                // Assuming original quantities are stored in another property or can be retrieved from elsewhere
                Console.WriteLine("Quantities reset successfully.");
            }
            else
            {
                Console.WriteLine("Recipe not found.");
            }
        }

        static void ClearRecipe()
        {
            if (recipes.Count == 0)
            {
                Console.WriteLine("No recipes found.");
                return;
            }

            Console.WriteLine("Enter the name of the recipe to clear: ");
            string recipeName = Console.ReadLine();

            Recipe recipe = recipes.FirstOrDefault(r => r.Name == recipeName);

            if (recipe != null)
            {
                recipes.Remove(recipe);
                Console.WriteLine("Recipe cleared successfully.");
            }
            else
            {
                Console.WriteLine("Recipe not found.");
            }
        }
    }
}
